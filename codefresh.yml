version: "1.0"
stages:
  - "build"
  - "test"
  - "deploy"
steps:
  main_clone:
    type: "git-clone"
    title: "init clone"
    description: "Cloning main repository..."
    repo: "jldeen/spring-boot-websocket-chat-demo"
    revision: "${{CF_BRANCH}}"
    stage: "build"

  jFrogMavenBuild:
    title: Use Jfrog special build to make jar
    image: jldeen/docker-jfrog-cli-java:1.0.3
    shell: bash
    stage: "build"
    commands:
      - export M2_HOME=/usr/share/maven
      - jfrog rt config ${{JFROG_SERVER_ID}} --url=https://jfrogjd.jfrog.io/jfrogjd --user=${{JFROG_USER}} --password=${{JFROG_PASS}}
      - jfrog rt mvn "clean install -U -Dproject.version=${{CF_BUILD_ID}} -Dartifactory.publish.buildInfo=true" --build-name=${{CF_REPO_NAME}} --build-number=${{CF_BUILD_ID}}
      - jfrog rt build-collect-env ${{CF_REPO_NAME}} ${{CF_BUILD_ID}}
      - jfrog rt build-publish ${{CF_REPO_NAME}} ${{CF_BUILD_ID}}

  BuildingDockerImage:
    title: Building Docker Image
    type: build
    image_name: jldeen/chattybot
    working_directory: ./
    dockerfile: Dockerfile
    tag: "${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}"
    stage: "build"

  PushingDockerImage:
    title: Promote to Artifactory
    type: push
    candidate: ${{BuildingDockerImage}}
    image_name: jldeen/chattybot
    tag: "${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}"
    registry: jfrog-jd-docker
    stage: "build"

  LintHelmChart:
    title: helm lint
    image: devth/helm
    commands:
      - helm lint ./charts/spring-boot-websocket-chat-demo
    stage: "test"

  PackageHelmChart:
    title: helm package
    image: devth/helm
    stage: "build"
    commands:
      - cf_export PACKAGE=$(helm package ./charts/spring-boot-websocket-chat-demo | cut -d " " -f 8)

  JFrogDockerMetadataPush:
    title: jfrog publish build info to artifactory
    stage: "build"
    type: composition
    composition:
      version: "2"
      services:
        buildimage:
          image: ${{BuildingDockerImage}}
          command: sh -c "exit 0"
    composition_candidates:
      dockerinfo_upload:
        image: jldeen/docker-jfrog-cli-java:1.0.3
        working_dir: ${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}
        environment:
          - JFROG_CLI_OFFER_CONFIG=false
        command: >
          bash -c '
            docker login --username ${{JFROG_USER}} --password "${{JFROG_PASS}}" ${{REPOSITORY}}

          # --- Login to Artifactory
              jfrog rt config ${{JFROG_SERVER_ID}} --url=https://jfrogjd.jfrog.io/jfrogjd --user=${{JFROG_USER}} --password=${{JFROG_PASS}}

          # --- JFrog Publish Build Info to Artifactory
              jfrog rt build-collect-env ${{CF_REPO_NAME}} ${{CF_BUILD_ID}}
              jfrog rt build-add-git ${{CF_REPO_NAME}} ${{CF_BUILD_ID}}

          # --- Jfrog Docker Push
              jfrog rt docker-push --server-id=${{JFROG_SERVER_ID}} --build-name=${{CF_REPO_NAME}} --build-number=${{CF_BUILD_ID}} "${{REPOSITORY}}:${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}" docker-dev

          # --- Upload Helm Chart Artifact to Artifactory
              jfrog rt upload --build-name=${{CF_REPO_NAME}} --build-number=${{CF_BUILD_ID}} "$PACKAGE" helm-repo

          # -- build publish
              jfrog rt build-publish --build-url="${{CF_BUILD_URL}}" --env-exclude="*key*;*pass*;" ${{CF_REPO_NAME}} ${{CF_BUILD_ID}} |& tee publish.txt
              codefresh auth create-context --api-key ${{CODEFRESH_CLI_KEY}}
              export JF_BUILD="$$(sed -n "s/^.*http/http/p" publish.txt)"
              codefresh annotate image jldeen/chattybot:${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}} --label JF_BUILD="$$(sed -n "s/^.*http/http/p" publish.txt)"'
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - /var/lib/docker:/var/lib/docker
          - "${{CF_VOLUME_NAME}}:/codefresh/volume"

  security_scan:
    title: Xray Security Scan
    image: jldeen/docker-jfrog-cli-java:1.0.3
    stage: "test"
    shell: bash
    commands:
      - jfrog rt config ${{JFROG_SERVER_ID}} --url=https://jfrogjd.jfrog.io/jfrogjd --user=${{JFROG_USER}} --password=${{JFROG_PASS}}
      - jfrog rt build-scan --server-id=${{JFROG_SERVER_ID}} ${{CF_REPO_NAME}} ${{CF_BUILD_ID}} | tee results.json
      - export JF_BUILD=$(sed -n "s/^.*http/http/p" publish.txt)
      - export JF_XRAY_ALERTS=$(jq ".summary.total_alerts" results.json)
      - export JF_XRAY_MSG=$(jq ".summary.message" results.json)
      - echo "$JF_XRAY_MSG"
      - echo "$JF_XRAY_ALERTS"
      - export JF_XRAY_RPT="https://jfrogjd-xray.jfrog.io/web/#/component/details/build:~2F~2Fspring-boot-websocket-chat-demo/${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}"
      - if [[ $JF_XRAY_ALERTS -eq 0 ]]; then slackStyle=good; else slackStyle=danger; fi
      - codefresh annotate image jldeen/chattybot:$CF_BRANCH_TAG_NORMALIZED-$CF_SHORT_REVISION --label JF_XRAY_ALERTS=$JF_XRAY_ALERTS --label JF_XRAY_MSG=$JF_XRAY_MSG --label JF_XRAY_RPT=$JF_XRAY_RPT
      - cf_export JF_BUILD=$(sed -n "s/^.*http/http/p" publish.txt)
      - cf_export JF_SCAN_FAIL=$(jq ".summary.fail_build" results.json)
      - cf_export JF_XRAY_ALERTS=$(jq ".summary.total_alerts" results.json)
      - cf_export JF_XRAY_RPT="https://jfrogjd-xray.jfrog.io/web/#/component/details/build:~2F~2Fspring-boot-websocket-chat-demo/${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}"
      - cf_export slackStyle=$slackStyle
    on_success:
      metadata:
        set:
          - "${{BuildingDockerImage.imageId}}":
              - JFROG_XRAY_SCAN: true
              - CF_QUALITY: true
    on_fail:
      metadata:
        set:
          - "${{BuildingDockerImage.imageId}}":
              - JFROG_XRAY_SCAN: false
              - CF_QUALITY: false

  SendBuildToSlack:
    title: Send build info to Slack
    image: tutum/curl
    stage: "test"
    commands:
      - curl -X POST --data-urlencode 'payload={"text":"Jfrog Artifactory Codefresh Build ${{CF_BUILD_ID}} Information","attachments":[{"fallback":"JFrog Artifactory Codefresh Build ${{CF_BUILD_ID}} Information","color":"#36a64f","author_link":"'$JF_BUILD'","title":"JFrog Build Artifacts","title_link":"'$JF_BUILD'","text":"Build Artifacts for ${{CF_BUILD_ID}}","fields":[{"title":"Requested for","value":"Jessica Deen","short":false}],"footer":"JFrog Artifactory Notifications","footer_icon":"https:\/\/www.clipartmax.com\/png\/middle\/69-698347_jfrog-artifactory-logo.png"}]}' ${{SLACK_WEBHOOK_URL}}

  SendScanToSlack:
    title: Send xray info to Slack
    image: jldeen/docker-jfrog-cli-java:1.0.3
    stage: "test"
    shell: bash
    commands:
      - echo "'$JF_SCAN_FAIL'"
      - curl -X POST --data-urlencode 'payload={"text":"JFrog XRay Scan Report for Codefresh Build ${{CF_BUILD_ID}}","attachments":[{"fallback":"JFrog XRay Scan Report for Codefresh Build ${{CF_BUILD_ID}}","color":"'$slackStyle'","author_link":"'$JF_XRAY_RPT'","title":"JFrog XRay Scan Report","title_link":"'$JF_XRAY_RPT'","text":"JFrog Xray Scan Report for Build ${{CF_BUILD_ID}}","fields":[{"title":"XRay Alerts","value":"'$JF_XRAY_ALERTS' alerts were generated","short":false},{"title":"Requested for","value":"Jessica Deen","short":false}],"footer":"JFrog XRay Scan Notifications","footer_icon":"https:\/\/www.clipartmax.com\/png\/middle\/69-698347_jfrog-artifactory-logo.png"}]}' ${{SLACK_WEBHOOK_URL}}
    # - if [[ $JF_SCAN_FAIL == *true* ]]; then exit 1; else exit 0; fi

  askForPermission:
    type: pending-approval
    stage: "test"
    title: Promote to QA/Prod

  Deploy_with_Helm:
    # image: codefresh/cfstep-helm:2.14.1
    image: jldeen/cfstep-helm:3.0.0-beta.4
    stage: "deploy"
    when:
      steps:
        - name: askForPermission
          on:
            - approved
    environment:
      - custom_image_tag=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
      - custom_image_repository=${{REPOSITORY}}
      - custom_ingress_hostname=${{INGRESS_HOSTNAME}}
      - custom_buildID=${{CF_BUILD_ID}}
    on_success:
      metadata:
        set:
          - "${{BuildingDockerImage.imageId}}":
              - DEPLOYED_TO_AZURE_AKS: true
