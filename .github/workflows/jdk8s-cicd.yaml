on: [push]

name: jdk8s-full-cicd

env:
  resourceGroup: jdk8s
  location: eastus
  SESSION_TRACKING: jdk8s
  USER_ID: jessde
  subName: "ca-jessde-demo-test"
  aksName: jdk8s
  vnetName: jdk8sVnet
  subnetName: jdk8sSubnet
  vnodeSubnetName: VNSubnet

  # Deployment Paths
  Infrastructure: IaC/deployment.json
  # tailwindCharts: TailwindTraders-Backend/Deploy/helm
  # tailwindChartValuesScript: helm-values/generate-config.ps1
  # tailwindChartValues: values.yaml
  # tailwindWebImages: TailwindTraders-Backend/Deploy/tailwindtraders-images
  # tailwindServiceAccount: TailwindTraders-Backend/Deploy/helm/ttsa.yaml
  # # Github SECRETS
  # sqlServerUser: sqladmin

jobs:
  deployInfra:
    runs-on: self-hosted
    steps:
      # checkout branch
      - name: git checkout master branch
        uses: actions/checkout@master

      # log into Azure
      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # create resource group
      - name: "Create Resource Group"
        run: |
          az group create --subscription "$subName" --name $resourceGroup --location $location --tags Tracking=$SESSION_CODE CreatedBy=$USER_ID

      # create VNet
      - name: "Create Virtual Network"
        run: |
          # run check for idempotent pipeline
          vnetCheck=$(az network vnet list -g $resourceGroup -o tsv --query [0].name)
          if [[  $vnetCheck == *$vnetName*  ]]; then
            echo 'Virtual Network already exists'
          else
            echo 'Virtual network does not exist. Creating virtual network now.'
            # create vnet
            az network vnet create --resource-group $resourceGroup --name $vnetName --subscription "$subName" --address-prefixes 10.0.0.0/8 --subnet-name $subnetName --subnet-prefix 10.240.0.0/16
          fi

      # create virtual node subnet
      - name: "Create Virtual Node Subnet"
        run: |
          # run check for idempotent pipeline
          vnetSubnetCheck=$(az network vnet subnet list -g $resourceGroup --vnet-name $vnetName -o tsv --query '[1].name')

          if [[  $vnetSubnetCheck == *$vnodeSubnetName* ]]; then
            echo 'Virtual node subnet already exists'
          else
            echo 'Virtual node subnet does not exist. Creating virtual subnet now.'
            # configure vnet subnet
            az network vnet subnet create --resource-group $resourceGroup --subscription "$subName" --vnet-name $vnetName --name $vnodeSubnetName --address-prefix 10.241.0.0/16
          fi

      #  Deploy backend infrastructure
      - name: "Setup Backend Infra"
        env:
          azureClientID: 47e460d8-c66e-4489-85dd-ee2b522aaea5
        run: |
          vnetID=$(az network vnet subnet show --resource-group $resourceGroup --vnet-name $vnetName --name $subnetName --query id -o tsv)

          az group deployment create -g $resourceGroup --template-file $Infrastructure \
            --parameters servicePrincipalId=$azureClientID servicePrincipalSecret=${{ secrets.CLIENT_SECRET }} \
            sqlServerAdministratorLogin=$sqlServerUser sqlServerAdministratorLoginPassword=${{ secrets.sqlServePassword }} \
            aksVersion=1.14.8 pgversion=10 vnetSubnetID=$vnetID

          echo "::set-env name=AKS_CLUSTER::$(az aks list --resource-group $resourceGroup --query [0].name -o tsv)"

          AKS_CLUSTER=$(az aks list --resource-group $resourceGroup --query [0].name -o tsv)

          az aks get-credentials --name $AKS_CLUSTER --resource-group $resourceGroup --admin --overwrite-existing

      # Setup virutal node
      - name: "Install Virtual Node on K8s cluster"
        run: |
          vNodeEnabledCheck=$(az aks show --resource-group $resourceGroup --name $AKS_CLUSTER --query addonProfiles.aciConnectorLinux.enabled -o tsv)
          if [[ $vNodeEnabledCheck == *true*  ]]; then
            echo "AKS Virtual Node add-on already enabled."
          else
            # Deploy virtual node
            az aks enable-addons \
            --resource-group $resourceGroup  \
            --name $AKS_CLUSTER \
            --addons virtual-node \
            --subnet-name $vnodeSubnet
          fi

      - name: "Create keda namespace"
        env:
          nameSpace: keda
        run: |
          # keda namespace
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Namespace
          metadata:
            name: $nameSpace
          EOF

      - name: "Setup scaling backend components"
        run: |
          # add kedacore repo
          helm repo add kedacore https://kedacore.github.io/charts
          # add stable repo for helm 3
          helm repo add stable http://storage.googleapis.com/kubernetes-charts
          # repo update
          helm repo update
          # keda install
          helm upgrade --install keda kedacore/keda --namespace keda
          # rabbitmq install
          helm upgrade --install rabbitmq --set rabbitmq.username=user,rabbitmq.password=PASSWORD stable/rabbitmq
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: rabbitmq-consumer
          data:
            RabbitMqHost: YW1xcDovL3VzZXI6UEFTU1dPUkRAcmFiYml0bXEuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbDo1Njcy
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: rabbitmq-consumer
            namespace: default
            labels:
              app: rabbitmq-consumer
          spec:
            selector:
              matchLabels:
                app: rabbitmq-consumer
            template:
              metadata:
                labels:
                  app: rabbitmq-consumer
              spec:
                containers:
                - name: rabbitmq-consumer
                  image: jeffhollan/rabbitmq-client:dev
                  imagePullPolicy: Always
                  command:
                    - receive
                  args:
                    - 'amqp://user:PASSWORD@rabbitmq.default.svc.cluster.local:5672'
                  envFrom:
                  - secretRef:
                      name: rabbitmq-consumer
                dnsPolicy: ClusterFirst
                nodeSelector:
                  kubernetes.io/role: agent
                  beta.kubernetes.io/os: linux
                  type: virtual-kubelet
                tolerations:
                - key: virtual-kubelet.io/provider
                  operator: Exists
                - key: azure.com/aci
                  effect: NoSchedule    
          ---
          apiVersion: keda.k8s.io/v1alpha1
          kind: ScaledObject
          metadata:
            name: rabbitmq-consumer
            annotations:
              "helm.sh/hook": crd-install
            namespace: default
            labels:
              deploymentName: rabbitmq-consumer
          spec:
            scaleTargetRef:
              deploymentName: rabbitmq-consumer
            pollingInterval: 5   # Optional. Default: 30 seconds
            cooldownPeriod: 30   # Optional. Default: 300 seconds
            maxReplicaCount: 30  # Optional. Default: 100
            triggers:
            - type: rabbitmq
              metadata:
                queueName: hello
                host: RabbitMqHost
                queueLength  : '5'
          EOF

      - name: "Notes"
        run: |
          INGRESS=$(az aks show -n $AKS_CLUSTER -g $resourceGroup --query addonProfiles.httpApplicationRouting.config.HTTPApplicationRoutingZoneName -o tsv)
          echo "*************** Connection Information ***************"
          echo "The Tailwind Traders Website can be accessed at:"
          echo "http://{$INGRESS}"
          echo ""
          echo "Run the following to connect to the AKS cluster:"
          echo "az aks get-credentials --name $AKS_CLUSTER --resource-group $resourceGroup --admin"
          echo "******************************************************"
      # - name: "Create k8s service account"
      #   env:
      #     nameSpace: twt
      #   run: |
      #     cat <<EOF | kubectl apply -f -
      #     apiVersion: v1
      #     kind: ServiceAccount
      #     imagePullSecrets:
      #     - name: acr-auth
      #     metadata:
      #       name: ttsa
      #       namespace: $nameSpace
      #     EOF
  # buildImages:
  #   runs-on: self-hosted
  #   needs: deployInfra
  #   steps:
  #     - name: "Checkout TailwindTraders Backend Source"
  #       run: |
  #         # fresh download
  #         rm -rf TailwindTraders-Backend
  #         git clone https://github.com/microsoft/TailwindTraders-Backend.git
  #         # git -C TailwindTraders-Backend checkout ed86d5f
  #     - name: "Create Helm gvalues file"
  #       run: |
  #         pwsh $tailwindChartValuesScript -resourceGroup $resourceGroup -outputFile $tailwindChartValues
  #     - name: "Get ACR Container Information"
  #       run: |
  #         echo "Retrieving Container Registry info..."
  #         acrName=$(az acr list -g $resourceGroup -o tsv --query [0].name)
  #         CONTAINER_REGISTRY=$(az acr list -g $resourceGroup -o tsv --query [0].loginServer)
  #         # acr/container registry variables
  #         echo "::set-env name=CONTAINER_REGISTRY::$(az acr list -g $resourceGroup -o tsv --query [0].loginServer)"
  #         echo "::set-env name=REGISTRY_USERNAME::$(az acr credential show -n $acrName --query username -o tsv)"
  #         echo "::set-env name=REGISTRY_PASSWORD::$(az acr credential show -n $acrName -o tsv --query passwords[0].value)"
  #         echo "::set-env name=dPath::$GITHUB_WORKSPACE/TailwindTraders-Backend/Source"
  #         echo "::set-env name=pictures::$(az storage account list -g $resourceGroup --query [0].primaryEndpoints.blob -o tsv)"
  #     # docker login
  #     - name: "docker login"
  #       uses: azure/docker-login@v1
  #       with:
  #         login-server: ${{ env.CONTAINER_REGISTRY }}
  #         username: ${{ env.REGISTRY_USERNAME }}
  #         password: ${{ env.REGISTRY_PASSWORD }}
  #     - name: "build/push cart.api"
  #       run: |
  #         # echo "Your container registry is: $CONTAINER_REGISTRY. Your registry username is: $REGISTRY_USERNAME and your registry password is: $REGISTRY_PASSWORD"
  #         docker build $dPath/Services/Tailwind.Traders.Cart.Api/ -t $CONTAINER_REGISTRY/cart.api:$GITHUB_SHA
  #         docker push $CONTAINER_REGISTRY/cart.api:$GITHUB_SHA
  #     - name: "build/push product.api"
  #       run: |
  #         docker build -f $dPath/Services/Tailwind.Traders.Product.Api/Dockerfile $dPath -t $CONTAINER_REGISTRY/product.api:$GITHUB_SHA
  #         docker push $CONTAINER_REGISTRY/product.api:$GITHUB_SHA
  #     - name: "build/push profile.api"
  #       run: |
  #         docker build -f $dPath/Services/Tailwind.Traders.Profile.Api/Dockerfile $dPath -t $CONTAINER_REGISTRY/profile.api:$GITHUB_SHA
  #         docker push $CONTAINER_REGISTRY/profile.api:$GITHUB_SHA
  #     - name: "build/push login.api"
  #       run: |
  #         docker build -f $dPath/Services/Tailwind.Traders.Login.Api/Dockerfile $dPath -t $CONTAINER_REGISTRY/login.api:$GITHUB_SHA
  #         docker push $CONTAINER_REGISTRY/login.api:$GITHUB_SHA
  #     - name: "build/push coupon.api"
  #       run: |
  #         docker build $dPath/Services/Tailwind.Traders.Coupon.Api/ -t $CONTAINER_REGISTRY/coupon.api:$GITHUB_SHA
  #         docker push $CONTAINER_REGISTRY/coupon.api:$GITHUB_SHA
  #     - name: "build/push popular-product.api"
  #       run: |
  #         docker build -f $dPath/Services/Tailwind.Traders.PopularProduct.Api/Dockerfile $dPath -t $CONTAINER_REGISTRY/popular-product.api:$GITHUB_SHA
  #         docker push $CONTAINER_REGISTRY/popular-product.api:$GITHUB_SHA
  #     - name: "build/push stock.api"
  #       run: |
  #         docker build $dPath/Services/Tailwind.Traders.Stock.Api/ -t $CONTAINER_REGISTRY/stock.api:$GITHUB_SHA
  #         docker push $CONTAINER_REGISTRY/stock.api:$GITHUB_SHA
  #     - name: "build/push image-classifier.api"
  #       run: |
  #         docker build -f $dPath/Services/Tailwind.Traders.ImageClassifier.Api/Dockerfile $dPath -t $CONTAINER_REGISTRY/image-classifier.api:$GITHUB_SHA
  #         docker push $CONTAINER_REGISTRY/image-classifier.api:$GITHUB_SHA
  #     - name: "build/push mobileapigw"
  #       run: |
  #         git -C TailwindTraders-Backend checkout master
  #         docker build -f $dPath/ApiGWs/Tailwind.Traders.Bff/Dockerfile $dPath -t $CONTAINER_REGISTRY/mobileapigw:$GITHUB_SHA
  #         docker push $CONTAINER_REGISTRY/mobileapigw:$GITHUB_SHA
  #     - name: "build/push webapigw"
  #       run: |
  #         # git -C TailwindTraders-Backend checkout ed86d5f
  #         docker build -f $dPath/ApiGWs/Tailwind.Traders.WebBff/Dockerfile $dPath -t $CONTAINER_REGISTRY/webapigw:$GITHUB_SHA
  #         docker push $CONTAINER_REGISTRY/webapigw:$GITHUB_SHA
  #     - name: "buid/push web frontend"
  #       run: |
  #         rm -rf TailwindTraders-Website
  #         #git clone https://github.com/microsoft/TailwindTraders-Website.git
  #         git clone https://github.com/neilpeterson/TailwindTraders-Website.git
  #         docker build $GITHUB_WORKSPACE/TailwindTraders-Website/Source/Tailwind.Traders.Web/ -t $CONTAINER_REGISTRY/web:$GITHUB_SHA
  #         docker push $CONTAINER_REGISTRY/web:$GITHUB_SHA
  # deployMicroservices:
  #   runs-on: self-hosted
  #   needs: buildImages
  #   env:
  #     nameSpace: twt
  #   steps:
  #     - name: "configure deployment environment"
  #       run: |
  #         # set for this step
  #         AKS_CLUSTER=$(az aks list --resource-group $resourceGroup --query [0].name -o tsv)
  #         # persist env vars
  #         echo "::set-env name=AKS_CLUSTER::$(az aks list --resource-group $resourceGroup --query [0].name -o tsv)"
  #         echo "::set-env name=INGRESS::$(az aks show -n $AKS_CLUSTER -g $resourceGroup --query addonProfiles.httpApplicationRouting.config.HTTPApplicationRoutingZoneName -o tsv)"
  #         # acr/container registry variables
  #         # echo "::set-env name=acrName::$(az acr list -g $resourceGroup -o tsv --query "[0].name")"
  #         echo "::set-env name=CONTAINER_REGISTRY::$(az acr list -g $resourceGroup -o tsv --query [0].loginServer)"
  #         echo "::set-env name=pictures::$(az storage account list -g $resourceGroup --query [0].primaryEndpoints.blob -o tsv)"
  #         # git -C TailwindTraders-Backend checkout ed86d5f
  #     - name: "helm install login api"
  #       run: |
  #         # twt login
  #         helm upgrade --install my-tt-login -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$CONTAINER_REGISTRY/login.api --set image.tag=$GITHUB_SHA --set inf.storage.profileimages=${pictures}profiles-list $tailwindCharts/login-api
  #     - name: "helm install product api"
  #       run: |
  #         # twt product
  #         helm upgrade --install my-tt-product -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$CONTAINER_REGISTRY/product.api --set image.tag=$GITHUB_SHA --set inf.storage.productimages=${pictures}product-list --set inf.storage.productdetailimages=${pictures}product-detail --set az.productvisitsurl=http://your-product-visits-af-here $tailwindCharts/products-api
  #     - name: "helm install coupon api"
  #       run: |
  #         # twt coupon
  #         helm upgrade --install my-tt-coupon -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$CONTAINER_REGISTRY/coupon.api --set image.tag=$GITHUB_SHA --set inf.storage.couponimage=${pictures}coupon-list $tailwindCharts/coupons-api
  #     - name: "helm install profile api"
  #       run: |
  #         # twt profile
  #         helm upgrade --install my-tt-profile -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$CONTAINER_REGISTRY/profile.api --set image.tag=$GITHUB_SHA --set inf.storage.profileimages=${pictures}profiles-list $tailwindCharts/profiles-api
  #     - name: "helm install popular product api"
  #       run: |
  #         # twt popular product
  #         helm upgrade --install my-tt-popular-product -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$CONTAINER_REGISTRY/popular-product.api --set image.tag=$GITHUB_SHA --set initImage.repository=$CONTAINER_REGISTRY/popular-product-seed.api --set initImage.tag=$GITHUB_SHA --set inf.storage.productimages=${pictures}product-list $tailwindCharts/popular-products-api
  #     - name: "helm install stock api"
  #       run: |
  #         # twt stock
  #         helm upgrade --install my-tt-stock -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$CONTAINER_REGISTRY/stock.api --set image.tag=$GITHUB_SHA $tailwindCharts/stock-api
  #     - name: "helm install image classifier api"
  #       run: |
  #         # twt image classifier
  #         helm upgrade --install my-tt-image-classifier -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$CONTAINER_REGISTRY/image-classifier.api --set image.tag=$GITHUB_SHA $tailwindCharts/image-classifier-api
  #     - name: "helm install cart api"
  #       run: |
  #         # twt cart
  #         helm upgrade --install my-tt-cart -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$CONTAINER_REGISTRY/cart.api --set image.tag=$GITHUB_SHA $tailwindCharts/cart-api --set B2C.clientID=none --set B2C.identityMetadata=none --set B2C.issuer=none --set B2C.policyName=none --set B2C.tenantID=none
  #     - name: "helm install mobile bff api"
  #       run: |
  #         # twt mobile bff
  #         helm upgrade --install my-tt-mobilebff -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$CONTAINER_REGISTRY/mobileapigw --set image.tag=$GITHUB_SHA --set probes.readiness=null $tailwindCharts/mobilebff
  #         # helm upgrade --install my-tt-mobilebff -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=neilpeterson/mobileapigw --set image.tag=v2 --set probes.readiness=null $tailwindCharts/mobilebff
  #     - name: "helm install web bff api"
  #       run: |
  #         # twt web bff
  #         helm upgrade --install my-tt-webbff -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=$CONTAINER_REGISTRY/webapigw --set image.tag=$GITHUB_SHA $tailwindCharts/webbff --set B2C.Authority=none --set B2C.B2CIssuer=none
  #         # helm upgrade --install my-tt-webbff -f $tailwindChartValues --namespace=$nameSpace --set ingress.hosts={$INGRESS} --set image.repository=neilpeterson/webapigw --set image.tag=v2 $tailwindCharts/webbff --set B2C.Authority=none --set B2C.B2CIssuer=none
  #     - name: "helm install web frontend"
  #       run: |
  #         # twt web
  #         helm upgrade --install web -f TailwindTraders-Website/Deploy/helm/gvalues.yaml --namespace=$nameSpace --set ingress.protocol=http --set ingress.hosts={$INGRESS} --set image.repository=$CONTAINER_REGISTRY/web --set image.tag=$GITHUB_SHA TailwindTraders-Website/Deploy/helm/web/
  #     - name: "Label all pods for network policy"
  #       run: |
  #         # add label
  #         kubectl label -n twt pods --all role=twt-app --overwrite=true
  #     - name: "Copy website images to storage"
  #       run: |
  #         STORAGE=$(az storage account list -g $resourceGroup -o table --query  [].name -o tsv)
  #         BLOB_ENDPOINT=$(az storage account list -g $resourceGroup --query [].primaryEndpoints.blob -o tsv)
  #         CONNECTION_STRING=$(az storage account show-connection-string -n $STORAGE -g $resourceGroup -o tsv)
  #         az storage container create --name "coupon-list" --public-access blob --connection-string $CONNECTION_STRING
  #         az storage container create --name "product-detail" --public-access blob --connection-string $CONNECTION_STRING
  #         az storage container create --name "product-list" --public-access blob --connection-string $CONNECTION_STRING
  #         az storage container create --name "profiles-list" --public-access blob --connection-string $CONNECTION_STRING
  #         az storage blob upload-batch --destination $BLOB_ENDPOINT --destination coupon-list  --source $tailwindWebImages/coupon-list --account-name $STORAGE
  #         az storage blob upload-batch --destination $BLOB_ENDPOINT --destination product-detail --source $tailwindWebImages/product-detail --account-name $STORAGE
  #         az storage blob upload-batch --destination $BLOB_ENDPOINT --destination product-list --source $tailwindWebImages/product-list --account-name $STORAGE
  #         az storage blob upload-batch --destination $BLOB_ENDPOINT --destination profiles-list --source $tailwindWebImages/profiles-list --account-name $STORAGE
  #     - name: "Setup scaling backend components"
  #       run: |
  #         # add kedacore repo
  #         helm repo add kedacore https://kedacore.github.io/charts
  #         # add stable repo for helm 3
  #         helm repo add stable http://storage.googleapis.com/kubernetes-charts
  #         # repo update
  #         helm repo update
  #         # keda install
  #         helm upgrade --install keda kedacore/keda --namespace keda
  #         # rabbitmq install
  #         helm upgrade --install rabbitmq --set rabbitmq.username=user,rabbitmq.password=PASSWORD stable/rabbitmq
  #         cat <<EOF | kubectl apply -f -
  #         apiVersion: v1
  #         kind: Secret
  #         metadata:
  #           name: rabbitmq-consumer
  #         data:
  #           RabbitMqHost: YW1xcDovL3VzZXI6UEFTU1dPUkRAcmFiYml0bXEuZGVmYXVsdC5zdmMuY2x1c3Rlci5sb2NhbDo1Njcy
  #         ---
  #         apiVersion: apps/v1
  #         kind: Deployment
  #         metadata:
  #           name: rabbitmq-consumer
  #           namespace: default
  #           labels:
  #             app: rabbitmq-consumer
  #         spec:
  #           selector:
  #             matchLabels:
  #               app: rabbitmq-consumer
  #           template:
  #             metadata:
  #               labels:
  #                 app: rabbitmq-consumer
  #             spec:
  #               containers:
  #               - name: rabbitmq-consumer
  #                 image: jeffhollan/rabbitmq-client:dev
  #                 imagePullPolicy: Always
  #                 command:
  #                   - receive
  #                 args:
  #                   - 'amqp://user:PASSWORD@rabbitmq.default.svc.cluster.local:5672'
  #                 envFrom:
  #                 - secretRef:
  #                     name: rabbitmq-consumer
  #               dnsPolicy: ClusterFirst
  #               nodeSelector:
  #                 kubernetes.io/role: agent
  #                 beta.kubernetes.io/os: linux
  #                 type: virtual-kubelet
  #               tolerations:
  #               - key: virtual-kubelet.io/provider
  #                 operator: Exists
  #               - key: azure.com/aci
  #                 effect: NoSchedule
  #         ---
  #         apiVersion: keda.k8s.io/v1alpha1
  #         kind: ScaledObject
  #         metadata:
  #           name: rabbitmq-consumer
  #           annotations:
  #             "helm.sh/hook": crd-install
  #           namespace: default
  #           labels:
  #             deploymentName: rabbitmq-consumer
  #         spec:
  #           scaleTargetRef:
  #             deploymentName: rabbitmq-consumer
  #           pollingInterval: 5   # Optional. Default: 30 seconds
  #           cooldownPeriod: 30   # Optional. Default: 300 seconds
  #           maxReplicaCount: 30  # Optional. Default: 100
  #           triggers:
  #           - type: rabbitmq
  #             metadata:
  #               queueName: hello
  #               host: RabbitMqHost
  #               queueLength  : '5'
  #         EOF
  #     - name: "Notes"
  #       run: |
  #         INGRESS=$(az aks show -n $AKS_CLUSTER -g $resourceGroup --query addonProfiles.httpApplicationRouting.config.HTTPApplicationRoutingZoneName -o tsv)
  #         echo "*************** Connection Information ***************"
  #         echo "The Tailwind Traders Website can be accessed at:"
  #         echo "http://{$INGRESS}"
  #         echo ""
  #         echo "Run the following to connect to the AKS cluster:"
  #         echo "az aks get-credentials --name $AKS_CLUSTER --resource-group $resourceGroup --admin"
  #         echo "******************************************************"
  #     # logout
  #     - name: "Azure logout"
  #       run: |
  #         az logout
